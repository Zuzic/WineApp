{% for type in types.protocols where type|annotated:"mockable"%}
{% for import in type.imports %}
import {{ import.moduleName }}
{% endfor %}
{% endfor %}

{% macro swiftifyMethodName name %}{{ name | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | snakeToCamelCase | lowerFirstWord }}{% endmacro %}

{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}
{% macro underlyingMockedVariableName variable %}__{{ variable.name }}{% endmacro %}
{% macro mockedVariableType variable %}{% if variable|annotated:"type" %}{{ variable.annotations.type }}{% elif variable.type|annotated:"mockable" %}{{ variable.typeName }}{% elif variable.definedInType.associatedTypes[variable.typeName].typeName|annotated:"mockable" %}{{ variable.definedInType.associatedTypes[variable.typeName].typeName }}Mock{% elif variable.isArray and variable.typeName.array.elementType|annotated:"mockable" %}{{ variable.typeName }}{% elif variable.isArray and variable.definedInType.associatedTypes[variable.typeName.array.elementTypeName].type|annotated:"mockable" %}Array<{{ variable.definedInType.associatedTypes[variable.typeName.array.elementTypeName].typeName }}Mock>{% else %}{{ variable.typeName }}{% endif %}{% endmacro %}
{% macro mockedVariableValue variable %}{% if variable|annotated:"default" %}{{ variable.annotations.default }}{% else %}{% call mockedVariableType variable%}(){% endif %}{% endmacro %}
{% macro mockedVariableAnnotations variable %}{% if variable|annotated:"published" %}@Published {% endif %}{% endmacro %}

{% macro mockedMethodName method %}{% if method|annotated:"definition" %}{{ method.annotations.definition }}{% else %}{{ method.name }}{% endif%}{% endmacro %}

{% macro mockOptionalVariable variable %}
    {% call mockedVariableAnnotations variable %}var {% call mockedVariableName variable %}: {% call mockedVariableType variable %}{% if variable|annotated:"default" %} = {{ variable.annotations.default }}{% endif %}
{% endmacro %}
{% macro mockNonOptionalArrayOrDictionaryVariable variable %}
    {% call mockedVariableAnnotations variable %}var {% call mockedVariableName variable %}: {% call mockedVariableType variable %} = {% call mockedVariableValue variable %}
{% endmacro %}
{% macro mockNonOptionalVariable variable %}
{% if variable|annotated:"published" or variable|annotated:"default" or variable.type|annotated:"mockable" or variable.definedInType.associatedTypes[variable.typeName].type|annotated:"mockable" %}
    {% call mockedVariableAnnotations variable %}var {% call mockedVariableName variable %}: {% call mockedVariableType variable %} = {% call mockedVariableValue variable %}
{% else %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get { return {% call underlyingMockedVariableName variable %} }
        set(value) { {% call underlyingMockedVariableName variable %} = value }
    }
    var {% call underlyingMockedVariableName variable %}: {% if variable|annotated:"type" %}{{ variable.annotations.type }}{% else %}{{ variable.typeName }}!{% endif %}
{% endif %}{% endmacro %}

{% macro mockMethod method %}
    {% if not method.returnTypeName.isVoid %}
    var {% call swiftifyMethodName method.selectorName %}ReturnValue: {{ '(' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}{{ method.returnTypeName }}{{ ')' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}{{ '!' if not method.isOptionalReturnType }}
    {% endif %}
    func {% call mockedMethodName method %}{{ ' async' if method.isAsync }}{{ ' throws' if method.throws }}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% if method|annotated:"default" %}{{ method.annotations.default }}
        {% elif not method.returnTypeName.isVoid %}
        return {% call swiftifyMethodName method.selectorName %}ReturnValue
        {% endif %}
    }

{% endmacro %}


{% for type in types.protocols %}{% if type|annotated:"mockable" %}
class {{ type.name }}Mock: {{ type.name }} {
    {% for variable in type.allVariables|!definedInExtension %}
        {% if variable.isOptional %}
            {% call mockOptionalVariable variable %}
        {% elif variable.isArray or variable.isDictionary %}
            {% call mockNonOptionalArrayOrDictionaryVariable variable %}
        {% else %}
            {% call mockNonOptionalVariable variable %}
        {% endif %}
    {% endfor %}

    {% for method in type.allMethods|!definedInExtension %}
        {% call mockMethod method %}
    {% endfor %}
}

{% endif %}{% endfor %}